package io.iohk.praos.crypto

import akka.util.ByteString

/**
  * VrfProof contains a fresh random value generated using the user public key, a random seed and
  * VerifiableRandomFunction.prove method. And also contains the proof, that will be used later,
  * with the user public key, for verify that the random value was generated by him.
  */
case class VrfProof(random: RandomValue, proof: ByteString)

object VrfProof {
  // TODO: When the VrfProof be well defined, change to the true random length
  val randomLength = 32
}

trait VerifiableRandomFunction {

  def prove(privateKey: Key, randomSeed: RandomValue): VrfProof

  def verify(publicKey: Key, randomSeed: RandomValue, vrfProof: VrfProof): Boolean
}

/**
  * This is a fake implementation that fullfills VerifiableRandomFunction properties
  */
object VerifiableRandomFunctionStubImpl extends VerifiableRandomFunction {

  def prove(privateKey: Key, randomSeed: RandomValue): VrfProof =
    VrfProof(randomSeed, getPublicKeyFromPrivateKey(privateKey))

  def verify(publicKey: Key, randomSeed: RandomValue, vrfProof: VrfProof): Boolean =
    publicKey == vrfProof.proof && randomSeed == vrfProof.random
}
